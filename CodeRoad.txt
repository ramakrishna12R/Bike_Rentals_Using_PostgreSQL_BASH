
Learn Bash and SQL by Building a Bike Rental Shop

Review
The first thing you need to do is start the terminal. Do that by clicking the "hamburger" menu at the top left of the screen, going to the "terminal" section, and clicking "new terminal". Once you open a new one, type echo hello terminal into the terminal and press enter.

You are going to build a bike rental shop. It will have a database, and a bash script to interact with the database. Use the terminal to connect to PostgreSQL by entering psql --username=freecodecamp --dbname=postgres.

List the databases with \l to see what databases are here.

You need your own database for the bike shop. Create a new database named bikes.

List databases again to make sure your database got created.

There it is. Connect to it so you can start building the structure of your bike shop database.

Your database needs three tables. One for your bike inventory, one for your customers, and one for the bikes that are rented out. Create a table named bikes in your database for the inventory.

Display the tables to make sure your table got created.

The table will have a few columns for bike information. First, is a unique ID column. Add a column to the bikes table named bike_id. Give it a type of SERIAL and make it a PRIMARY KEY.

Use the display command to view the details of the bikes table.

The first column is set. Add a column named type for the type of bike. Make it a VARCHAR(50) and give it a constraint of NOT NULL.

Display the details of the bikes table again.

The first two columns look good. Add a column named size to the bikes table that is an INT and has the NOT NULL constraint. This will be for the size of each bike.

Add another column to the table named available. Make it a boolean and has a constraint of NOT NULL. Also give it a default value of TRUE. This will be set to false when someone rents out a bike.

Display the details of the bikes table again so you can make sure it's how you want it.

That table is done for now. Create another table named customers. It will store a name and phone number for each customer that rents a bike.

Add a customer_id column to your new table that is a type of SERIAL and make it a PRIMARY KEY.

Display the details of the customers table so you can make sure your new column is there.

There it is. Add a column named phone for customers phone numbers. Make it a varying character that has a maximum length of 15 characters. Also make sure it can't be null, and that it has to be unique.

Add the last column. Call it name and make it a VARCHAR(40) that can't be null.

Display the details of the customers table.

That table is finished. Lastly, you need a table to store which bikes are rented and who has rented them. Create a new table named rentals.

Add a rental_id column to your new table. Make it automatically increment with SERIAL and make it the primary key for this table.

Display the details of the rentals table.

Next, you need a column for the customer who is renting a bike. Add column named customer_id. This will have an id of a customer from the customers table. Make the column an INT and NOT NULL to start.

Make the column you just added a foreign key that references the customer_id column from the customers table. Here's an example of how you can do that:

ALTER TABLE table_name ADD FOREIGN KEY(column_name) REFERENCES referenced_table(referenced_column);
Display the details of the rentals table to make sure your key is set.

That foreign key is set. You need another column so you know what bike a customer is renting. Add a column named bike_id and make it an INT and NOT NULL.

Make that column a foreign key that references the bike_id column from the bikes table so you know what bike the id is for.

Display the details of the rentals table so you can make sure the key is correct.

Moving along. You want to know when a customer rents a bike, and when it gets returned. Add a column to your rentals table named date_rented that's a type of DATE. Make sure the entry can't be null, and give it a default value of NOW().

Display the details of the rentals table again.

It looks good. Lastly, you need a column for when a customer returns a bike. Add a column named date_returned that's a type of DATE.

View the details of the table again.

The tables are all finished. Display all the tables so you can see what you ended up with.

You have nine bikes in your inventory. Add the first one to your bikes table. It has a type of Mountain and a size of 27. Make sure to put your VARCHAR values in single quotes. The bike_id and available columns should be filled in automatically, so you don't need to worry about those.

View all the columns in your bikes table with SELECT.

Looks like it's all working, the bike_id and available columns were filled in automatically. Insert another bike. Give it a type of Mountain and a size of 28.

Add another Mountain bike to your inventory. Make it a 29 inch bike.

Add a 27 inch Road bike to the table.

Use SELECT to view all the data in the bikes table again.

Add the two bikes to your inventory, they are 28 and 29 inch Road bikes. Try to add them both with one command.

There's three more bikes. Add 19, 20, and 21 inch BMX bikes to your table. Try to add them with one command.

View all the data in your bikes table.

Your current inventory is all added. For the rest of the project, I recommend leaving that terminal open and connected, and that you should "split" the terminal so you have a second one to use for bash commands. Do that by clicking the "hamburger" menu at the top left of the window, going to the "terminal" section, and clicking "split terminal". After you have opened it, use the touch command to create a file named bike-shop.sh in the project folder.

This file will be the program for your bike rental shop. Open the file and add a "shebang" at the top so it uses bash when it's executed. If you don't remember, it looks like this: #!/bin/bash.

In the file, use echo with the -e flag to print ~~~~~ Bike Rental Shop ~~~~~ with a new line at the beginning and end.

Use the terminal (not the psql one) and the chmod command to make your file executable. Add the +x flag and bike-shop.sh to the command to do that.

Type ./bike-shop.sh in the terminal to run your script.

ðŸ˜„ In the script, create an empty function named MAIN_MENU. This will have a few options to enter when the script runs to rent or return a bike.

In your function, echo the text How may I help you? so that there's a greeting when you go to the menu.

Call your MAIN_MENU at the bottom of the file so the function runs when you start the script.

Run the file in the terminal again so you can see what it is outputting.

It's coming along. Add another echo command in the function below the other one. Make it output text that looks like this:


1. Rent a bike
2. Return a bike
3. Exit
Note that there's an empty line at the start.

Run the file to make sure it worked.

You have some options displaying. Next, you need to get input from whoever is using the program. Use the read command to read input into a variable called MAIN_MENU_SELECTION below the options.

When an option gets entered, you need to take a user to one of those other menus. Add an empty RENT_MENU function below the MAIN_MENU function.

For the time being, just echo Rent Menu in the function so you can see if it's working.

Add an empty RETURN_MENU function below the RENT_MENU function for when a user enters the option to return a bike.

Use echo to print Return Menu in the function you just added. You will change these later.

Add an empty EXIT function below the RETURN_MENU function for when a user wants to exit the program.

This one probably doesn't need a placeholder message. In the EXIT function, use echo to print Thank you for stopping in. with a new line at the beginning and end of the message.

When a user enters an option at the main menu, you want to take them to the appropriate sub-menu. You can use a case statement for this. Here's an example:

case EXPRESSION in
  PATTERN) STATEMENTS ;;
  PATTERN) STATEMENTS ;;
  PATTERN) STATEMENTS ;;
  *) STATEMENTS ;;
esac
The expression you want is the $MAIN_MENU_SELECTION variable. You are expecting it to be a 1, 2, or 3 for your various menus. Add a case statement that takes users to their corresponding menus. The * is for when anything else is entered. Take users to the MAIN_MENU when the variable isn't a 1, 2, or 3.

Run the script a few times and try out the different menus. Be sure to enter something other than one of the options to go to the main menu.

Add an argument to where you call MAIN_MENU in the case statement. It should be Please enter a valid option.. The next step will adjust the function so the message is printed when a user enters an invalid option.

At the top of the MAIN_MENU function, add an if condition that checks if there's an argument ($1) passed to the function. If there is, print the message with a new line in front of it.

Run the script and enter an invalid option to see the message. Exit the program when you are done.

Looks good. Delete the echo "Rent Menu" from the RENT_MENU function so you can start adding the ability to rent a bike from the database.

In the RENT_MENU function, add three single line comments; get available bikes, if no bikes available, and send to main menu, in that order.

To get the bikes available, you need to query the database from your script. Below the "shebang", add a PSQL variable that looks like this: PSQL="psql -X --username=freecodecamp --dbname=bikes --tuples-only -c". You will then be able to use it to query the database like this: $($PSQL "<query_here>").

Below the get available bikes comment. Create an AVAILABLE_BIKES variable that gets the bike_id, type, and size columns from the bikes table for the bikes that are available. Order the results by their bike_id column. Here's an example: AVAILABLE_BIKES=$($PSQL "<query_here>")

Below the new variable, use echo to print it. Place it in double quotes so it prints any new lines.

Run your script and go to the rent menu to see if the available bikes are being printed.

Awesome. In the psql prompt, set the available column to false for all the bikes so you can see what it prints when there's no bikes available.

Run your script and go to the rent menu to see the output.

So if there's no bike available, the variable will be empty. In the script, below the if no bikes available comment, add an if condition that checks if the variable is empty. Use -z to check if it's empty. Place the send to main menu comment in its STATEMENTS area.

Below the comment in the if you just added. Send users to the main menu and give them the message, Sorry, we don't have any bikes available right now.

Run the script and go to the rent menu to see the message. When you are done, exit the program.

If no bikes are available, you will get that message. Add an else to the if condition for when there is bikes available. In it, add four single line comments; display available bikes, ask for bike to rent, if input is not a number, and send to main menu.

Below the display available bikes comment you just added, use echo to print Here are the bikes we have available: with a new line in front of the message

Move the echo command that prints all the available bikes below the message you just added.

In the psql prompt, set all the bikes, except for the BMX bikes, back to true so you can see a list of bikes to rent.

Run the script and go to the rent menu to see the list of bikes available.

Instead of directly printing the list, pipe the output into a while loop that reads each line. Here's how that looks:

echo "$AVAILABLE_BIKES" | while read <VAR_1> <VAR_2> <VAR_3> <VAR_4> <VAR_5>
do
  <STATEMENTS>
done
It will read the first line of your AVAILABLE_BIKES variable into the five variables. Each variable being the next word in the line. Read each line into variables, BIKE_ID BAR TYPE BAR SIZE. In the <STATEMENTS> area, use echo to print the BIKE_ID, TYPE, and SIZE variables, in that order.

Run the script and go to the rent menu again to see if it's working.

It's working ðŸ˜„ Adjust the echo command that prints the bike info so that the first line printed would look like this: 1) 27" Mountain Bike. The rest would look the same, but with their bike info. Make sure to escape any characters you need to.

Run the script and go to the rent menu again to see what it looks like now.

That's better. Below the ask for bike to rent comment, print Which one would you like to rent? with a new line in front of it.

Just below that, add a command to read input into a variable named BIKE_ID_TO_RENT.

Next, you want to find out how to test if the user input is a number. In the terminal, enter [[ a =~ [0-9] ]]; echo $? to see if a is a number. The conditional expression will run, and echo $? will print the exit code of it (the last command).

It printed 1 for false. Meaning that a did not match the pattern [0-9], or a did not contain a number from 0-9. Enter the same commands, but check if a1 matches the pattern.

That printed 0 for true. a1 does contain a number from 0-9. Enter the same command, but change the pattern to ^[0-9]$. The ^ signifies the start of the pattern, and $ means the end. So the input will have to start, contain a number 0-9, and end.

1 for false. a1 does not match the pattern. Using the same syntax, check if 1 matches the pattern.

1 does match the pattern. It starts, contains a number, and ends. Check if 11 matches the same pattern.

That did not match because the pattern only allows a single number. Add a + after the [0-9] to allow any strings that start, contain one or more numbers, and end.

So that pattern will match any positive integers. You want to check if the input is not a number. Add ! in front of the comparison of the previous command to do that.

Back in your script, below the if input is not a number comment, add an if condition that checks if the input is not a number using the method you just practiced. Add the send to main menu comment in the then area of the if.

If the $BIKE_ID_TO_RENT variable is not a number, add the code to send users to the main menu with the message, That is not a valid bike number.

Run the script, go to the rent menu, and enter something that isn't a number to make sure it is working. When you are done, exit the program.

Add an else area for when the input is a number. Add these three single line comments in it; get bike availability, if not available, send to main menu.

Below the get bike availability comment you just added, create a BIKE_AVAILABILITY variable. Set it equal to a query that gets the available column from the bikes table for the input. Also, make sure to only get the row if it is available.

Right below the variable you just created, use echo to print it so you can see what it looks like.

Run the script a few times, go to the rent menu, enter a bike that is available and one that isn't. You should have some BMX bikes that aren't available.

The variable will be t or empty. Below the if not available comment, add an if condition that checks if it's empty. Put the send to main menu comment in it's statements area.

In the if condition you just added, send users to the main menu with the message That bike is not available. if they input a number that isn't available.

Remove the line where you print the BIKE_AVAILABILITY variable. You don't need it anymore.

Run the script and go to the rent menu, enter a bike that isn't available to make sure it's working. When you are done, exit the program.

In the psql prompt, set all the bikes availability back to true.

In your script, add an else for when a bike is available. Add these four comments in the else area get customer info, if customer doesn't exist, get new customer name, and insert new customer.

As the comments say, you need to get the customer info and find out if they are an existing customer. Below the get customer info comment, print What's your phone number? with a new line in front of it.

Below the line you just printed, read input into a PHONE_NUMBER variable. Since the phone number is unique, you can use it to identify a customer.

With the customer's phone number, you can get their name. Below where you get the phone number, create a CUSTOMER_NAME variable that gets the customers name from the database using the phone number.

If the customer is in the database with the phone number used, the variable will be set to the name. If not, it will be empty. Add an if condition below the if customer doesn't exist comment that checks if the variable is empty. Place the next two comments in the then area.

If the customer isn't in the database, you need to get their name so you can add them. Below the get new customer name comment, print What's your name? with a new line in front of the message.

Below the question you just printed, read input into a variable named CUSTOMER_NAME.

You have the two pieces of information you need. Below the insert new customer comment, create an INSERT_CUSTOMER_RESULT variable that inserts the customer into the database.

Run your script and go to the rent menu. Pick a bike to rent, then enter 555-5555 when it asks for a phone number, and Me when it asks for your name.

That should have added a new customer to the database. In the psql prompt, view all the data in the customers table to see if it's working.

Excellent. View all the data in the rentals table.

So you still need to add the rental to the rentals table when a bike is picked out. View all the data in the bikes table.

And set the available column to false for the bike rented. Below the end of the if statement that inserts a new customer, add five more comments; get customer_id, insert bike rental, set bike availability to false, get bike info, and send to main menu

You're getting close to done with the rent functionality. To add a rental to the database, you need the customer ID. Below the get customer_id comment, create a CUSTOMER_ID variable that gets the customer_id using the phone number.

Now that you have the bike ID and customer ID, you can add the rental to the database. Below the insert bike rental comment, create a INSERT_RENTAL_RESULT variable that adds the rental to the database.

That should add the rental to the database. The last thing to do is set available to false for the bike. Below the set bike availability to false comment, create a SET_TO_FALSE_RESULT variable that does that.

Run the script and go to the rent menu. Pick the first bike on the list and enter 555-5555 when it asks for a phone number again. That phone number should already be in the database, so it won't ask for a name or insert a customer.

In the psql prompt, view all the data in the rentals table. There should be a new rental.

The rental was added and the date_rented was filled in automatically. ðŸ˜„ Next, view all the data in the bikes table. Order the results by bike_id

The available column was set to false for the bike you rented. The last thing to do is give a nice message about the rental. Below the get bike info comment, create a BIKE_INFO variable that gets the size and type, in that order, of the bike rented.

Below the variable you just created, use echo to print it.

Run the script again and go to the rent menu, there should now be one less bike displayed. Pick the next bike on the list and rent it using the customer with phone number 555-5555 again so you can see the variable.

It should have printed 28 | Mountain. The message you want to print after someone rents a bike would have said I have put you down for the 28" Mountain Bike, Me.. You need to format that variable for the message. The sed command can be used to replace characters and patterns in text. It looks like this: sed s/<regex_pattern_to_replace>/<characters_to_replace_with>/<regex_flags>. In the terminal, enter echo '28 | Mountain' | sed 's/ /=/g' to practice.

The command you used, "piped" a string (28 | Mountain) to the sed command, where it replaced all the spaces with =. Enter the same command, but replace all the spaces with nothing.

The g regex flag stands for "global". It will replace all instance of the pattern. In this case, it replaced all the spaces. Enter the same command but without that flag.

That time, only the first instance of the pattern was replaced. The first space was removed. Enter the same command, but replace the first instance of  | (<space>|) with nothing.

Enter the same command, but make the output look like how you want in the message, 28" Mountain.

Back in your script, where you echo the BIKE_INFO, pipe the output into a sed command that replaces  | (<space>|) with " so the text will read <SIZE>" <TYPE>. 28 | Mountain would become 28" Mountain, for instance.

Run the script and rent another bike using the customer with phone number 555-5555 again. Make sure the bike info printed looks like you want.

Now it is formatted for the message. Take that echo command and the part that formats it, put it in a sub shell, and set the output into a variable named BIKE_INFO_FORMATTED. Here's an example: BIKE_INFO_FORMATTED=$(<formatted info here>)

What you put in the subshell ($(...)) will be executed, and the result of it will replace the subshell. In this case, the formatted bike info was printed when you ran the script before, so the BIKE_INFO_FORMATTED variable will be set to that. Below the send to main menu comment, send users to the main menu with a message that would print I have put you down for the 28" Mountain Bike, Me. if Me rented the 28 inch Mountain Bike.

Run the script and rent the next bike on the list. Use the customer with 555-5555 as their phone number. When you are done, exit the program.

There's an extra space around the customer's name. You can use sed again to fix that. In the terminal, enter echo ' M e ' to print M e with spaces around it to see if you can find out how.

It printed, but you can only assume there's a space at the end. Place the last command in a subshell with quotes around it. Put a period right after the subshell and echo the whole thing in the terminal. Here's how it looks: echo "$(echo ' M e ')."

Now you can be certain there's a space at the end. Within the subshell of the last command, use a pipe and the sed command to replace the first space with no space. Here's the sed replacement pattern you want: 's/ //'.

That removed only the first space it found. Change the previous command to replace all instances of a space instead of just the first one.

That replaced all the spaces. You only had an extra space at the beginning of the customer name. Add a ^ in front of the space in the replacement pattern of the last command to only replace a space at the beginning of the text.

The caret you added means that's the start of the text. So it will replace a space only if it's at the beginning. Enter the last command, but add two more spaces (three total) at the beginning of the text.

The ^  (^<space>) pattern only replaced the first space. Add * at the end of the matching pattern to replace all spaces at the beginning of text.

The customer name only had an extra space at the beginning. Unsure as to why, but there may be others with extra spaces at the end as well. You can match the end of text with $. Change the matching pattern of the last command so it replaces a single space at the end. The pattern is  $ (<space>$).

Add two more spaces to the end of the text in the previous command (three spaces total).

The pattern only replaces a single space at the end. Change the last command so it replaces all spaces at the end of the text.

That replaced all the spaces at the end of the text. You can use | as an "or" operator in a matching pattern to replace one pattern or another. Use it to change the matching pattern so it would replace any amount of spaces at the beginning and any amount of spaces at the end of the text.

That didn't work. It doesn't like that "or" (|) operator for some reason. Check the manual of the sed command to see if you can find anything.

Somewhere in there is a flag for using extended regular expressions with sed. That might work. Add it to the echo "$(echo '   M e   ' | sed 's/^ *| *$//g')." command that didn't work to find out.

ðŸ˜‰ That trimmed all spaces from the front and end of the text. Back in the last message of your script, place the CUSTOMER_NAME variable in a subshell, echo and pipe it into a sed command that removes all spaces from the front and back. Use the same method you used in the terminal.

Run the script and rent another bike with the customer whose phone number is 555-5555. When you are done, exit the program.

Run the script again. Rent another bike, use 000-0000 as the phone number this time, and Test as the name to create a new customer. When you are done, exit the program.

Run the script again. Rent another bike with the customer you just created. When you are done, exit the program.

In the psql prompt, view all the data in your bikes table in order by the bike_id.

There should be two bikes left available to rent. Next, look at all the data in the customers table.

There should two customers in that table now. Lastly, look at all the data in the rentals table.

The rent functionality looks like it all works. Delete the echo Return Menu line in the RETURN_MENU function so you can get started with that.

Add three single line comments to the return menu function; get customer info, if not found, and send to main menu, in that order.

Below the get customer info comment you just added, print What's your phone number? with a new line in front of the sentence.

Just below that, use read to get input into a PHONE_NUMBER variable.

Just below that, set the CUSTOMER_ID variable to a query that gets the customer ID from the database using the phone number they gave you.

If they are in the database, the variable will be their customer_id. If not, it will be empty. Below the if not found comment, add an if statement that checks if it's empty. Put the send to main menu comment in the then area.

If the customer isn't found, send them to the main menu with the message I could not find a record for that phone number.

Run the script and go to the return menu. Enter a phone number that is not in the database. When you are done, exit the program.

Add an else to the if condition for if the phone number is found in the database. Place get customer's rentals, if no rentals, and send to main menu in the else area as single line comments.

You want to find out what rentals a customer has using their phone number and display them. You will need to join all the tables. Start by using the psql prompt to view all the data in the bikes table.

Next, use a LEFT JOIN with bikes as the left table to join the bikes and rentals tables. Use the USING keyword to join the two tables.

You only need the bikes that are being rented. Use an inner join with the same two tables to only get those. Use the USING keyword again.

Add a join to the previous command that joins the last table so you can get the customer information. Use an INNER JOIN and the USING keyword again.

Add two conditions to the last query to narrow down the results to the bikes that are currently being rented by customer with 555-5555 as their phone number. The second condition should check the date_returned column

Now you have all the rentals for one specific customer. Only get the columns you need to display the bike information to them. They are the same three columns you used to display the list of available bikes.

One more thing, order the results of the last query by their bike_id column.

That's the query you will need to use to get the bikes a customer is renting. In your script below the get customer's rentals comment. Create a CUSTOMER_RENTALS variable that gets the rentals for the customer. Use the PHONE_NUMBER variable to get them.

Below the variable you just created, use echo to print it. Make sure to put double quotes around it.

Run the script and go to the return menu. Enter 555-5555 for the phone number to see the rentals for Me.

The query is working. If the customer has no rentals, the variable will be empty. Below the if no rentals comment, add an if condition that checks if it's empty. Put the send to main menu comment in the then area again.

If the customer has no rentals, send them to the main menu with the message You do not have any bikes rented. Add the code below the next comment.

Add an else to the condition for when the customer does have rentals. Place four single line comments in it; display rented bikes, ask for bike to return, if not a number, and send to main menu.

Below the display rented bikes comment, print Here are your rentals: with a new line in front of it.

Move the echo $CUSTOMER_RENTALS line to below the line you just printed.

Run the script and go to the return menu. Enter 555-5555 for the phone number to see the rented bikes.

Where you print the list of rented bikes, pipe the command into a while loop that reads the data. You should read the data into BIKE_ID, BAR, TYPE, BAR, and SIZE variables. Make it print each rented bike in the same fashion as the list of available bikes.

Run the script and go to the return menu. Enter the same phone number again to make sure the list is showing up correctly.

Below the ask for bike to return comment, print Which one would you like to return? with a new line in front of it.

Below the line you just printed, read input into a BIKE_ID_TO_RETURN variable.

Below the if not a number comment, check if the input for the bike ID to return is a number using the same method you did earlier. Place the send to main menu comment in the statement.

If they don't input a number, send them to the main menu with That is not a valid bike number. as the message.

Add an else for when they do input a number. Place check if input is rented, if input not rented, and send to main menu single line comments in it.

You need to check if the input is a bike_id rented by the customer so you can return it. In the psql prompt, join the rentals and customers tables with an INNER JOIN using the USING keyword.

Add three conditions to the previous query. Check the phone, bike_id, and date_returned columns to narrow the results to the first bike you rented with Me.

You only need to know what bike is going to be returned. Narrow the columns from the last query to only get the one column you would need for returning a bike.

Back in the script, below the check if input is rented comment, create a RENTAL_ID variable that gets the rental ID of the bike that was input.

Below the if input not rented comment, add an if that checks if the RENTAL_ID variable is empty. Place the send to main menu comment in the then area.

If the input isn't rented by the given customer, send them to the main menu with You do not have that bike rented. as the message.

Add an else to the if condition you just added. Use echo to print Rental ID $RENTAL_ID found in it so you can see if it's all working.

Run the script and go to the return menu. Enter 555-5555 to see the rented bikes. Input a bike that isn't on the list, then go to the menu again and input a bike that is on the list.

Looks like it works. Delete the line where you print the rental ID.

Add three single line comments in the else area; update date_returned, set bike availability to true, and send to main menu.

After a person picks a bike to return and you know that it's a bike they have rented, you need to update all the info in the database to return it. Below the update date_returned comment, create a RETURN_BIKE_RESULT variable that sets the date_returned column to NOW() for the bike rented. Use the RENTAL_ID to figure out which row to update.

That should update the rentals table. Lastly, you need to make the bike available again. Below the set bike availability to true comment, create a SET_TO_TRUE_RESULT variable that makes the bike available again.

After all that is done, send them to the main menu with Thank you for returning your bike. as the message.

Run the script and return one of the bikes that Me has rented out. When you are done, exit the program.

In the psql prompt, view all the data in the rentals table.

Now the rental has been returned. View all the data in the bikes table in order by their bike_id.

And the bike is available again. This is the last step. Run the script once more. Feel free to play around, rent and return some bikes. When you are ready to be done, return all the bikes you rented and exit the program.

Congratulations on completing "Learn Bash and SQL by Building a Bike Rental Shop"!
You've reached the end of the road...
To go down another path:

- open a new VSCode workspace
- relaunch the CodeRoad app
- select a new tutorial